<?xml version="1.0" encoding="utf-8" ?>
<!-- DOCTYPE has to be match the mapper definition precisely -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace is identical with the java interface full path -->
<mapper namespace="com.noah.mappers.StudentMapper">

	<!-- 
	    the "type" in resultMap can be shortly "Student" not "com.noah.domain.Student", 
		because in mybatis-config.xml, the typeAlias convert it 
    -->
	<resultMap id="StudentResult" type="Student">
		<id property="studId" column="stud_id"></id>
		<result property="name" column="name"></result>
		<result property="email" column="email"></result>
		<result property="dob" column="dob"></result>
	</resultMap>


	<!-- 
	    the resultMap below bind the fields in Student and Address together 
		it is not good for reusing. So we can extract the Address out embed it into 
		Student with <association/> tag 
	-->
	<!-- 
	    <resultMap id="StudentWithAddressResult" type="Student"> 
		    <id property="studId" column="stud_id"></id> 
		    <result property="name" column="name"></result> 
		    <result property="email" column="email"></result> 
		    <result property="dob" column="dob"></result> 
			<result property="address.addrId" column="addr_id"></result> 
			<result property="address.street" column="street"></result> 
			<result property="address.city" column="city"></result> 
			<result property="address.zipCode" column="zip_code"></result>
		</resultMap> 
    -->
    
    <resultMap id="StudentWithAddressResult" type="Student">
		<id property="studId" column="stud_id"></id>
		<result property="name" column="name"></result>
		<result property="email" column="email"></result>
		<result property="dob" column="dob"></result>
		<association property="address" resultMap = "AddressResult" />
	</resultMap>

	<resultMap id="StudentWithAddressResultNeedOneMoreSelect" type="Student">
		<id property="studId" column="stud_id"></id>
		<result property="name" column="name"></result>
		<result property="email" column="email"></result>
		<result property="dob" column="dob"></result>
		<!-- 
		    association can work with the "join column" and specify the "sub select".
		    Notice: here will run one more select statement 
		-->
		<association property="address" column="addr_id" select="findAddressById" />
	</resultMap>

	<resultMap id="AddressResult" type="com.noah.domain.Address">
		<id property="addrId" column="addr_id"></id>
		<result property="street" column="street"></result>
		<result property="city" column="city"></result>
		<result property="zipCode" column="zip_code"></result>
	</resultMap>

	<select id="findAllStudents" resultMap="StudentResult">
		select * from students order by name desc
	</select>

	<select id="findStudentWIthAddressById" parameterType="int" resultMap="StudentWithAddressResult">
		select S.stud_id, S.email, S.dob, A.addr_id, A.street, A.city, A.zip_code from students S left join address A on S.addr_id = A.addr_id where S.stud_id = #{id}
	</select>
	
    <select id="findStudentWIthAddressByIdNeedOneMoreSelect" parameterType="int" resultMap="StudentWithAddressResultNeedOneMoreSelect">
		select stud_id, email, dob, addr_id from students where stud_id = #{id}
	</select>

	<select id="findAddressById" parameterType="int" resultMap="AddressResult">
		select addr_id, street, city, zip_code from address where addr_id = #{id}
	</select>
	
	<insert id="insertStudent" parameterType="Student">
	   <!-- select key will help to set the studId before inserting
	        the Student instance will be filled with the studId
	    -->
	   <selectKey keyProperty="studId" resultType="int" order="BEFORE">
	     select nextval('student_seq') 
	   </selectKey>
	   insert into students (stud_id, name, email, dob) values (#{studId}, #{name}, #{email}, #{dob})
	</insert>
	
	<update id="updateStudent" parameterType="Student">
	   update students set name = #{name}, email = #{email}, dob = #{dob}, addr_id = #{address.addrId} where stud_id = #{studId}
	</update>
	
	<delete id="deleteStudentById" parameterType="int">
		delete from students where stud_id = #{id} 
	</delete>

</mapper>